@model List<ST10298850_PROG6212_POE.Models.LecturerModel>
@{
    var claims = ViewBag.Claims as List<ST10298850_PROG6212_POE.Models.LecturerClaimModel>;
}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<div class="HR-claim-main-content">
    <!-- Claims Table -->
    <div class="HR-table-container">
        <h2>Claims</h2>
        <form id="filterForm" class="HR-filter-form">
            <div class="HR-form-group">
                <label for="filterType">Filter by:</label>
                <select name="filterType" id="filterType" class="HR-form-control">
                    <option value="status">Status</option>
                    <option value="userid">User ID</option>
                </select>
            </div>
            <div class="HR-form-group" id="filterValueContainer">
                <label for="filterValue">Filter Value:</label>
                <select name="filterValue" id="filterValue" class="HR-form-control">
                    <!-- Populate these options dynamically or hardcode them -->
                    <!-- Example for Status -->
                    <option value="Pending">Pending</option>
                    <option value="Approved">Approved</option>
                    <option value="Rejected">Rejected</option>
                </select>
                <input type="text" name="filterValue" id="filterValueInput" class="HR-form-control" style="display:none;" placeholder="Enter User ID" />
            </div>
            <button type="button" id="generateReport" class="HR-btn-submit">Generate Report</button>
            <button type="button" id="clearFilters" class="HR-btn-clear">Clear Filters</button>
        </form>


        <div class="HR-table-wrapper">
            <table class="HR-table HR-claim-history-table">
                <thead>
                    <tr>
                        <th>Claim ID</th>
                        <th>User ID</th>
                        <th>Status</th>
                        <th>Submission Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (claims != null && claims.Any())
                    {
                        foreach (var claim in claims)
                        {
                            <tr>
                                <td>@claim.ClaimId</td>
                                <td>@claim.LecturerId</td>
                                <td>@claim.Status</td>
                                <td>@claim.SubmissionDate.ToShortDateString()</td>
                                <td>
                                    <a href="#" class="HR-btn-action">View</a>
                                    <a href="#" class="HR-btn-action">Edit</a>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5">No claims found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Users Table -->
    <div class="HR-table-container">
        <h2>Users</h2>
        <div class="HR-table-wrapper">
            <!-- Add wrapper for scrolling -->
            <table class="HR-table HR-users-table">
                <thead>
                    <tr>
                        <th>User ID</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        foreach (var user in Model)
                        {
                            <tr>
                                <td>@user.LecturerId</td>
                                <td>@user.Name</td>
                                <td>@user.Email</td>
                                <td>
                                    <button onclick="editUser(@user.LecturerId)" class="HR-btn-edit">Edit</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4">No users found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <form method="get" action="@Url.Action("GenerateReport", "HR")" target="_blank">
        <input type="hidden" name="filterType" id="hiddenFilterType" value="" />
        <input type="hidden" name="filterValue" id="hiddenFilterValue" value="" />
        <button type="submit" class="HR-btn-generate-report">Generate Report</button>
    </form>
</div>

<!-- JavaScript Section -->
<script>
    $(document).ready(function () {
        // Initialize event listeners
        initializeEventListeners();
    });

    // Function to initialize event listeners
    function initializeEventListeners() {
        // When the report generation button is clicked, synchronize the filters and generate the report
        $('#generateReport').on('click', function (e) {
            e.preventDefault(); // Prevent the default form submission

            // Get selected filter values
            const filterType = $('#filterType').val();
            const filterValue = filterType === 'userid' ? $('#filterValueInput').val() : $('#filterValue').val();

            // Make an AJAX call to generate the report
            $.ajax({
                url: '@Url.Action("GenerateReport", "HR")',
                type: 'GET',
                data: {
                    filterType: filterType,
                    filterValue: filterValue
                },
                success: function (response) {
                    // Create a temporary link element to download the file
                    const link = document.createElement('a');
                    link.href = window.URL.createObjectURL(new Blob([response], { type: 'text/csv' }));
                    link.download = `ClaimsReport_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.csv`;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                },
                error: function (xhr, status, error) {
                    console.error("Error generating report:", error);
                    alert("An error occurred while generating the report. Please try again.");
                }
            });
        });

        $('#filterForm').on('change', 'select, input', function () {
            applyFilters();  // Apply filters when a dropdown value changes
        });

        $('#clearFilters').on('click', function () {
            $('#filterType').val('');
            $('#filterValue').val('').hide();
            $('#filterValueInput').val('').hide();
            applyFilters();
        });

        function applyFilters() {
            const filterType = $('#filterType').val();
            const filterValue = filterType === 'userid' ? $('#filterValueInput').val() : $('#filterValue').val();

            // Send AJAX request to fetch filtered claims
            $.ajax({
                url: '@Url.Action("HRPageView", "HR")',
                method: 'GET',
                data: { filterType, filterValue },
                success: function (data) {
                    // Replace the claims table with the new data
                    $('.HR-claim-history-table tbody').html($(data).find('.HR-claim-history-table tbody').html());
                },
                error: function (err) {
                    console.error('Error fetching claims:', err);
                }
            });
        }

        // Handle filter type change to dynamically update the filter values
        $('#filterType').on('change', function () {
            const filterType = $(this).val();
            const $filterValue = $('#filterValue');
            const $filterValueInput = $('#filterValueInput');

            if (filterType === 'status') {
                $filterValue.show();
                $filterValueInput.hide();
                $filterValue.html(`
                        <option value="Pending">Pending</option>
                        <option value="Approved">Approved</option>
                        <option value="Rejected">Rejected</option>
                    `);
            } else if (filterType === 'userid') {
                $filterValue.hide();
                $filterValueInput.show();
            } else {
                $filterValue.hide();
                $filterValueInput.hide();
            }
        });
    }

    // Function to edit user details
    function editUser(userId) {
        const name = prompt("Enter new name:");
        const email = prompt("Enter new email:");
        if (name && email) {
            fetch('/HR/UpdateUser', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ LecturerId: userId, Name: name, Email: email })
            }).then(response => {
                if (response.ok) {
                    alert("User details updated successfully.");
                    window.location.reload();
                } else {
                    alert("Failed to update user details.");
                }
            }).catch(error => {
                console.error("Error updating user details:", error);
                alert("An error occurred while updating user details.");
            });
        }
    }
</script>

