@model List<ST10298850_PROG6212_POE.Models.LecturerModel>
@{
    var claims = ViewBag.Claims as List<ST10298850_PROG6212_POE.Models.LecturerClaimModel>;
}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<div class="HR-claim-main-content">
    <!-- Claims Table -->
    <div class="HR-table-container">
        <h2>Claims</h2>
        <form id="filterForm" class="HR-filter-form">
            <div class="HR-form-group">
                <label for="filterType">Filter by:</label>
                <select name="filterType" id="filterType" class="HR-form-control">
                    <option value="status">Status</option>
                    <option value="userid">User ID</option>
                </select>
            </div>
            <div class="HR-form-group" id="filterValueContainer">
                <label for="filterValue">Filter Value:</label>
                <select name="filterValue" id="filterValue" class="HR-form-control">
                    <option value="Pending">Pending</option>
                    <option value="Approved">Approved</option>
                    <option value="Rejected">Rejected</option>
                </select>
                <input type="text" name="filterValue" id="filterValueInput" class="HR-form-control" style="display:none;" placeholder="Enter User ID" />
            </div>
            <button type="button" id="generateReport" class="HR-btn-submit">Generate Report</button>
            <button type="button" id="clearFilters" class="HR-btn-clear">Clear Filters</button>
        </form>

        <div class="HR-table-wrapper">
            <table class="HR-table HR-claim-history-table">
                <thead>
                    <tr>
                        <th>Claim ID</th>
                        <th>User ID</th>
                        <th>Status</th>
                        <th>Submission Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (claims != null && claims.Any())
                    {
                        foreach (var claim in claims)
                        {
                            <tr id="claim-@claim.ClaimId">
                                <td>@claim.ClaimId</td>
                                <td>@claim.LecturerId</td>
                                <td>@claim.Status</td>
                                <td>@claim.SubmissionDate.ToShortDateString()</td>
                                <td>
                                    <button onclick="generateInvoice(@claim.ClaimId)" class="HR-btn-action">Invoice</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5">No claims found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Users Table -->
    <div class="HR-table-container">
        <h2>Users</h2>
        <div class="HR-table-wrapper">
            <table class="HR-table HR-users-table">
                <thead>
                    <tr>
                        <th>User ID</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        foreach (var user in Model)
                        {
                            <tr>
                                <td>@user.LecturerId</td>
                                <td>@user.Name</td>
                                <td>@user.Email</td>
                                <td>
                                    <button onclick="editUser(@user.LecturerId, '@user.Name', '@user.Email')" class="HR-btn-edit">Edit</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4">No users found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="HR-edit-user-form">
            <h2>Edit User</h2>
            <form id="editUserForm">
                <input type="hidden" id="editUserId" />
                <div class="HR-form-group">
                    <label for="editUserName">Name:</label>
                    <input type="text" id="editUserName" class="HR-form-control" />
                </div>
                <div class="HR-form-group">
                    <label for="editUserEmail">Email:</label>
                    <input type="email" id="editUserEmail" class="HR-form-control" />
                </div>
                <button type="button" onclick="saveUser()" class="HR-btn-submit">Save</button>
                <button type="button" onclick="cancelEdit()" class="HR-btn-clear">Cancel</button>
            </form>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        // Initialize event listeners
        initializeEventListeners();
    });

    function initializeEventListeners() {
        $('#generateReport').on('click', function (e) {
            e.preventDefault();
            try {
                const filterType = $('#filterType').val();
                const filterValue = filterType === 'userid' ? $('#filterValueInput').val() : $('#filterValue').val();
                if (!filterValue) {
                    alert("Please provide a filter value.");
                    return;
                }
                $.ajax({
                    url: '@Url.Action("GenerateReport", "HR")',
                    type: 'GET',
                    data: { filterType, filterValue },
                    success: function (response) {
                        try {
                            const link = document.createElement('a');
                            link.href = window.URL.createObjectURL(new Blob([response], { type: 'text/plain' }));
                            link.download = `ClaimsReport_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.txt`;
                            document.body.appendChild(link);
                            link.click();
                            document.body.removeChild(link);
                        } catch (error) {
                            console.error("Error processing report:", error);
                            alert("An error occurred while processing the report. Please try again.");
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error generating report:", error);
                        alert("An error occurred while generating the report. Please try again.");
                    }
                });
            } catch (error) {
                console.error("Unexpected error:", error);
                alert("An unexpected error occurred. Please try again.");
            }
        });

        $('#filterForm').on('change', 'select, input', function () {
            applyFilters();
        });

        $('#clearFilters').on('click', function () {
            $('#filterType').val('');
            $('#filterValue').val('').hide();
            $('#filterValueInput').val('').hide();
            applyFilters();
        });

        function applyFilters() {
            try {
                const filterType = $('#filterType').val();
                const filterValue = filterType === 'userid' ? $('#filterValueInput').val() : $('#filterValue').val();
                $.ajax({
                    url: '@Url.Action("HRPageView", "HR")',
                    method: 'GET',
                    data: { filterType, filterValue },
                    success: function (data) {
                        try {
                            $('.HR-claim-history-table tbody').html($(data).find('.HR-claim-history-table tbody').html());
                        } catch (error) {
                            console.error("Error updating table:", error);
                            alert("An error occurred while updating the table. Please try again.");
                        }
                    },
                    error: function (err) {
                        console.error('Error fetching claims:', err);
                        alert("An error occurred while fetching claims. Please try again.");
                    }
                });
            } catch (error) {
                console.error("Unexpected error:", error);
                alert("An unexpected error occurred. Please try again.");
            }
        }

        $('#filterType').on('change', function () {
            const filterType = $(this).val();
            const $filterValue = $('#filterValue');
            const $filterValueInput = $('#filterValueInput');
            if (filterType === 'status') {
                $filterValue.show();
                $filterValueInput.hide();
                $filterValue.html(`
                        <option value="Pending">Pending</option>
                        <option value="Approved">Approved</option>
                        <option value="Rejected">Rejected</option>
                    `);
            } else if (filterType === 'userid') {
                $filterValue.hide();
                $filterValueInput.show();
            } else {
                $filterValue.hide();
                $filterValueInput.hide();
            }
        });
    }

    function editUser(userId, name, email) {
        $('#editUserId').val(userId);
        $('#editUserName').val(name);
        $('#editUserEmail').val(email);
        $('.HR-edit-user-form').show();
    }

    function saveUser() {
        try {
            const userId = $('#editUserId').val();
            const name = $('#editUserName').val();
            const email = $('#editUserEmail').val();
            if (name && email) {
                const formData = new URLSearchParams();
                formData.append('userID', userId);
                formData.append('name', name);
                formData.append('email', email);

                fetch('/HR/UpdateUser', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: formData.toString()
                }).then(response => {
                    if (response.ok) {
                        alert("User details updated successfully.");
                        window.location.reload();
                    } else {
                        alert("Failed to update user details.");
                    }
                }).catch(error => {
                    console.error("Error updating user details:", error);
                    alert("An error occurred while updating user details.");
                });
            } else {
                alert("Please fill in all fields.");
            }
        } catch (error) {
            console.error("Unexpected error:", error);
            alert("An unexpected error occurred. Please try again.");
        }
    }



    function cancelEdit() {
        $('.HR-edit-user-form').hide();
    }

    function generateInvoice(claimId) {
        try {
            $.ajax({
                url: '@Url.Action("GenerateInvoice", "HR")',
                type: 'GET',
                data: { id: claimId },
                success: function (response) {
                    try {
                        const link = document.createElement('a');
                        link.href = window.URL.createObjectURL(new Blob([response], { type: 'text/plain' }));
                        link.download = `Invoice_${claimId}.txt`;
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    } catch (error) {
                        console.error("Error processing invoice:", error);
                        alert("An error occurred while processing the invoice. Please try again.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error generating invoice:", error);
                    alert("An error occurred while generating the invoice. Please try again.");
                }
            });
        } catch (error) {
            console.error("Unexpected error:", error);
            alert("An unexpected error occurred. Please try again.");
        }
    }
</script>

